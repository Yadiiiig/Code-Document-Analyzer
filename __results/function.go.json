{
 "name": "function.go",
 "original_name": "searchers/function.go",
 "extension": "go",
 "amount_lines": 90,
 "function_amount": 2,
 "variables_amount": 0,
 "functions": [
  {
   "name": "FindFunctions",
   "comment": "",
   "oop_variable": "",
   "variables": [
    {
     "name": "l",
     "type": "*structure.Line",
     "comment": "",
     "references": null
    },
    {
     "name": "key",
     "type": "int",
     "comment": "",
     "references": null
    }
   ],
   "return_variables": null,
   "LineHeight": 9
  },
  {
   "name": "get_details",
   "comment": "",
   "oop_variable": "",
   "variables": [
    {
     "name": "text",
     "type": "[]string",
     "comment": "",
     "references": null
    },
    {
     "name": "raw",
     "type": "string",
     "comment": "",
     "references": null
    },
    {
     "name": "key",
     "type": "int",
     "comment": "",
     "references": null
    }
   ],
   "return_variables": null,
   "LineHeight": 24
  }
 ],
 "lines": [
  {
   "line": 0,
   "raw_text": "package searchers",
   "text": null,
   "length": 17,
   "variables": null
  },
  {
   "line": 1,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 2,
   "raw_text": "import (",
   "text": null,
   "length": 8,
   "variables": null
  },
  {
   "line": 3,
   "raw_text": "\t\"strings\"",
   "text": null,
   "length": 10,
   "variables": null
  },
  {
   "line": 4,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 5,
   "raw_text": "\t\"github.com/Yadiiiig/Code-Document-Analyzer/structure\"",
   "text": null,
   "length": 55,
   "variables": null
  },
  {
   "line": 6,
   "raw_text": ")",
   "text": null,
   "length": 1,
   "variables": null
  },
  {
   "line": 7,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 8,
   "raw_text": "func FindFunctions(l *structure.Line, key int) []structure.Function {",
   "text": null,
   "length": 69,
   "variables": null
  },
  {
   "line": 9,
   "raw_text": "\tvar res []structure.Function",
   "text": null,
   "length": 29,
   "variables": null
  },
  {
   "line": 10,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 11,
   "raw_text": "\tfor _, t := range l.Text {",
   "text": null,
   "length": 27,
   "variables": null
  },
  {
   "line": 12,
   "raw_text": "\t\tif t == \"func\" {",
   "text": null,
   "length": 18,
   "variables": null
  },
  {
   "line": 13,
   "raw_text": "\t\t\tres = append(res, get_details(l.Text, l.RawText, key))",
   "text": null,
   "length": 57,
   "variables": null
  },
  {
   "line": 14,
   "raw_text": "\t\t}",
   "text": null,
   "length": 3,
   "variables": null
  },
  {
   "line": 15,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 16,
   "raw_text": "\tif res != nil {",
   "text": null,
   "length": 16,
   "variables": null
  },
  {
   "line": 17,
   "raw_text": "\t\treturn res",
   "text": null,
   "length": 12,
   "variables": null
  },
  {
   "line": 18,
   "raw_text": "\t} else {",
   "text": null,
   "length": 9,
   "variables": null
  },
  {
   "line": 19,
   "raw_text": "\t\treturn nil",
   "text": null,
   "length": 12,
   "variables": null
  },
  {
   "line": 20,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 21,
   "raw_text": "}",
   "text": null,
   "length": 1,
   "variables": null
  },
  {
   "line": 22,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 23,
   "raw_text": "func get_details(text []string, raw string, key int) structure.Function {",
   "text": null,
   "length": 73,
   "variables": null
  },
  {
   "line": 24,
   "raw_text": "\tvar tmp []string",
   "text": null,
   "length": 17,
   "variables": null
  },
  {
   "line": 25,
   "raw_text": "\tvar first_variable string",
   "text": null,
   "length": 26,
   "variables": null
  },
  {
   "line": 26,
   "raw_text": "\tvar function_name string",
   "text": null,
   "length": 25,
   "variables": null
  },
  {
   "line": 27,
   "raw_text": "\tvar function_variables []string",
   "text": null,
   "length": 32,
   "variables": null
  },
  {
   "line": 28,
   "raw_text": "\tvar return_variables []string",
   "text": null,
   "length": 30,
   "variables": null
  },
  {
   "line": 29,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 30,
   "raw_text": "\t// Check if function has a variable",
   "text": null,
   "length": 36,
   "variables": null
  },
  {
   "line": 31,
   "raw_text": "\tif text[1][0:1] == \"(\" {",
   "text": null,
   "length": 25,
   "variables": null
  },
  {
   "line": 32,
   "raw_text": "\t\ttmp = strings.SplitN(raw, \"(\", 2)",
   "text": null,
   "length": 35,
   "variables": null
  },
  {
   "line": 33,
   "raw_text": "\t\ttmp = strings.SplitN(tmp[1], \")\", 2)",
   "text": null,
   "length": 38,
   "variables": null
  },
  {
   "line": 34,
   "raw_text": "\t\tfirst_variable = tmp[0]",
   "text": null,
   "length": 25,
   "variables": null
  },
  {
   "line": 35,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 36,
   "raw_text": "\t\ttmp = strings.SplitN(tmp[1], \"(\", 2)",
   "text": null,
   "length": 38,
   "variables": null
  },
  {
   "line": 37,
   "raw_text": "\t\tfunction_name = tmp[0]",
   "text": null,
   "length": 24,
   "variables": null
  },
  {
   "line": 38,
   "raw_text": "\t} else {",
   "text": null,
   "length": 9,
   "variables": null
  },
  {
   "line": 39,
   "raw_text": "\t\ttmp = strings.SplitN(raw, \" \", 2)",
   "text": null,
   "length": 35,
   "variables": null
  },
  {
   "line": 40,
   "raw_text": "\t\ttmp = strings.SplitN(tmp[1], \"(\", 2)",
   "text": null,
   "length": 38,
   "variables": null
  },
  {
   "line": 41,
   "raw_text": "\t\tfunction_name = tmp[0]",
   "text": null,
   "length": 24,
   "variables": null
  },
  {
   "line": 42,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 43,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 44,
   "raw_text": "\t// Check if function has function parameters",
   "text": null,
   "length": 45,
   "variables": null
  },
  {
   "line": 45,
   "raw_text": "\tif tmp[1][0:1] != \")\" {",
   "text": null,
   "length": 24,
   "variables": null
  },
  {
   "line": 46,
   "raw_text": "\t\ttmp = strings.SplitN(tmp[1], \")\", 2)",
   "text": null,
   "length": 38,
   "variables": null
  },
  {
   "line": 47,
   "raw_text": "\t\tfunction_variables = strings.Split(tmp[0], \", \")",
   "text": null,
   "length": 50,
   "variables": null
  },
  {
   "line": 48,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 49,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 50,
   "raw_text": "\ttmp = strings.SplitN(tmp[1], \"(\", 2)",
   "text": null,
   "length": 37,
   "variables": null
  },
  {
   "line": 51,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 52,
   "raw_text": "\tif strings.Contains(tmp[0], \"{\") {",
   "text": null,
   "length": 35,
   "variables": null
  },
  {
   "line": 53,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 54,
   "raw_text": "\t} else if strings.Contains(tmp[1], \",\") {",
   "text": null,
   "length": 42,
   "variables": null
  },
  {
   "line": 55,
   "raw_text": "\t\ttmp = strings.SplitN(tmp[1], \")\", 2)",
   "text": null,
   "length": 38,
   "variables": null
  },
  {
   "line": 56,
   "raw_text": "\t\treturn_variables = strings.Split(tmp[0], \", \")",
   "text": null,
   "length": 48,
   "variables": null
  },
  {
   "line": 57,
   "raw_text": "\t} else if !strings.Contains(tmp[0], \")\") {",
   "text": null,
   "length": 43,
   "variables": null
  },
  {
   "line": 58,
   "raw_text": "\t\ttmp = strings.Split(tmp[0], \" \")",
   "text": null,
   "length": 34,
   "variables": null
  },
  {
   "line": 59,
   "raw_text": "\t\treturn_variables = []string{tmp[1]}",
   "text": null,
   "length": 37,
   "variables": null
  },
  {
   "line": 60,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 61,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 62,
   "raw_text": "\tvar vars []structure.Variable",
   "text": null,
   "length": 30,
   "variables": null
  },
  {
   "line": 63,
   "raw_text": "\tif len(function_variables) != 0 {",
   "text": null,
   "length": 34,
   "variables": null
  },
  {
   "line": 64,
   "raw_text": "\t\tfor _, v := range function_variables {",
   "text": null,
   "length": 40,
   "variables": null
  },
  {
   "line": 65,
   "raw_text": "\t\t\ttmp_o := strings.Split(v, \" \")",
   "text": null,
   "length": 33,
   "variables": null
  },
  {
   "line": 66,
   "raw_text": "\t\t\tvars = append(vars, structure.Variable{",
   "text": null,
   "length": 42,
   "variables": null
  },
  {
   "line": 67,
   "raw_text": "\t\t\t\tName: tmp_o[0],",
   "text": null,
   "length": 19,
   "variables": null
  },
  {
   "line": 68,
   "raw_text": "\t\t\t\tType: tmp_o[1],",
   "text": null,
   "length": 19,
   "variables": null
  },
  {
   "line": 69,
   "raw_text": "\t\t\t})",
   "text": null,
   "length": 5,
   "variables": null
  },
  {
   "line": 70,
   "raw_text": "\t\t}",
   "text": null,
   "length": 3,
   "variables": null
  },
  {
   "line": 71,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 72,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 73,
   "raw_text": "\tvar r_vars []structure.Variable",
   "text": null,
   "length": 32,
   "variables": null
  },
  {
   "line": 74,
   "raw_text": "\tif len(return_variables) != 0 {",
   "text": null,
   "length": 32,
   "variables": null
  },
  {
   "line": 75,
   "raw_text": "\t\tfor _, v := range return_variables {",
   "text": null,
   "length": 38,
   "variables": null
  },
  {
   "line": 76,
   "raw_text": "\t\t\tvars = append(vars, structure.Variable{",
   "text": null,
   "length": 42,
   "variables": null
  },
  {
   "line": 77,
   "raw_text": "\t\t\t\tType: v,",
   "text": null,
   "length": 12,
   "variables": null
  },
  {
   "line": 78,
   "raw_text": "\t\t\t})",
   "text": null,
   "length": 5,
   "variables": null
  },
  {
   "line": 79,
   "raw_text": "\t\t}",
   "text": null,
   "length": 3,
   "variables": null
  },
  {
   "line": 80,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 81,
   "raw_text": "",
   "text": null,
   "length": 0,
   "variables": null
  },
  {
   "line": 82,
   "raw_text": "\treturn structure.Function{",
   "text": null,
   "length": 27,
   "variables": null
  },
  {
   "line": 83,
   "raw_text": "\t\tName:            function_name,",
   "text": null,
   "length": 33,
   "variables": null
  },
  {
   "line": 84,
   "raw_text": "\t\tOOPVariable:     first_variable,",
   "text": null,
   "length": 34,
   "variables": null
  },
  {
   "line": 85,
   "raw_text": "\t\tVariables:       vars,",
   "text": null,
   "length": 24,
   "variables": null
  },
  {
   "line": 86,
   "raw_text": "\t\tReturnVariables: r_vars,",
   "text": null,
   "length": 26,
   "variables": null
  },
  {
   "line": 87,
   "raw_text": "\t\tLineHeight:      key + 1,",
   "text": null,
   "length": 27,
   "variables": null
  },
  {
   "line": 88,
   "raw_text": "\t}",
   "text": null,
   "length": 2,
   "variables": null
  },
  {
   "line": 89,
   "raw_text": "}",
   "text": null,
   "length": 1,
   "variables": null
  }
 ],
 "raw_bytes": "package searchersimport (\t\"strings\"\t\"github.com/Yadiiiig/Code-Document-Analyzer/structure\")func FindFunctions(l *structure.Line, key int) []structure.Function {\tvar res []structure.Function\tfor _, t := range l.Text {\t\tif t == \"func\" {\t\t\tres = append(res, get_details(l.Text, l.RawText, key))\t\t}\t}\tif res != nil {\t\treturn res\t} else {\t\treturn nil\t}}func get_details(text []string, raw string, key int) structure.Function {\tvar tmp []string\tvar first_variable string\tvar function_name string\tvar function_variables []string\tvar return_variables []string\t// Check if function has a variable\tif text[1][0:1] == \"(\" {\t\ttmp = strings.SplitN(raw, \"(\", 2)\t\ttmp = strings.SplitN(tmp[1], \")\", 2)\t\tfirst_variable = tmp[0]\t\ttmp = strings.SplitN(tmp[1], \"(\", 2)\t\tfunction_name = tmp[0]\t} else {\t\ttmp = strings.SplitN(raw, \" \", 2)\t\ttmp = strings.SplitN(tmp[1], \"(\", 2)\t\tfunction_name = tmp[0]\t}\t// Check if function has function parameters\tif tmp[1][0:1] != \")\" {\t\ttmp = strings.SplitN(tmp[1], \")\", 2)\t\tfunction_variables = strings.Split(tmp[0], \", \")\t}\ttmp = strings.SplitN(tmp[1], \"(\", 2)\tif strings.Contains(tmp[0], \"{\") {\t} else if strings.Contains(tmp[1], \",\") {\t\ttmp = strings.SplitN(tmp[1], \")\", 2)\t\treturn_variables = strings.Split(tmp[0], \", \")\t} else if !strings.Contains(tmp[0], \")\") {\t\ttmp = strings.Split(tmp[0], \" \")\t\treturn_variables = []string{tmp[1]}\t}\tvar vars []structure.Variable\tif len(function_variables) != 0 {\t\tfor _, v := range function_variables {\t\t\ttmp_o := strings.Split(v, \" \")\t\t\tvars = append(vars, structure.Variable{\t\t\t\tName: tmp_o[0],\t\t\t\tType: tmp_o[1],\t\t\t})\t\t}\t}\tvar r_vars []structure.Variable\tif len(return_variables) != 0 {\t\tfor _, v := range return_variables {\t\t\tvars = append(vars, structure.Variable{\t\t\t\tType: v,\t\t\t})\t\t}\t}\treturn structure.Function{\t\tName:            function_name,\t\tOOPVariable:     first_variable,\t\tVariables:       vars,\t\tReturnVariables: r_vars,\t\tLineHeight:      key + 1,\t}}",
 "markdown_version": ""
}